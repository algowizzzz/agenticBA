#!/usr/bin/env python3
"""
Answer synthesis module for RiskGPT agent system.
"""

import logging
from typing import Dict, Any, Optional

from utils.formatting_utils import format_tool_results, has_actual_data

logger = logging.getLogger("riskgpt.synthesis")

class Synthesizer:
    """Synthesizes final answers from tool execution results."""
    
    def __init__(self, llm_manager, thinking_tracker=None, persona=None):
        """
        Initialize the synthesizer.
        
        Args:
            llm_manager: LLM manager for answer synthesis
            thinking_tracker: Optional thinking step tracker
            persona: Optional persona instance
        """
        self.llm_manager = llm_manager
        self.thinking_tracker = thinking_tracker
        self.persona = persona
        logger.info("Synthesizer initialized")
    
    def synthesize_answer(self, query: str, execution_results: Dict[str, Any]) -> str:
        """
        Generate a final answer based on the query and execution results.
        
        Args:
            query: Original user query
            execution_results: Results from tool execution
            
        Returns:
            Synthesized answer as a string
        """
        logger.info("[Synthesizer] Synthesizing final answer...")
        
        if self.thinking_tracker:
            self.thinking_tracker.add_step("Synthesizing comprehensive answer from all gathered information...")
        
        if not self.llm_manager or not self.llm_manager.llm:
            return "LLM not available for answer synthesis."
        
        try:
            # Check if this is a direct response
            if "direct_response" in execution_results and isinstance(execution_results["direct_response"], str):
                # Direct response already generated by the executor
                return execution_results["direct_response"]
            
            # Format the execution results
            result_context = format_tool_results(execution_results)
            logger.debug(f"[Synthesizer] Context for synthesis prompt:\n{result_context}")
            
            # Check if any actual data was found
            empty_results = not has_actual_data(execution_results)
            
            # Generate system prompt for synthesis
            system_prompt = self._generate_synthesis_prompt()
            
            # Generate human prompt including the execution results
            human_prompt = f"""Original User Query: "{query}"

Tool Execution Results Context:
--- START CONTEXT ---
{result_context}
--- END CONTEXT ---

Based on the provided context, formulate a USEFUL and COMPREHENSIVE answer to the Original User Query.

IMPORTANT: If the tools returned NO DATA or NO RELEVANT DATA, respond ONLY with: "NOTICE: No data found for your query." DO NOT provide general information or lengthy explanations."""

            # Get response from LLM
            final_answer = self.llm_manager.query(system_prompt, human_prompt)
            
            # Double check - if all results were empty but the response doesn't make it clear, add a prefix
            if empty_results and not any(x in final_answer[:200] for x in ["NOTICE:", "I could not retrieve", "No data found"]):
                final_answer = "NOTICE: No data found for your query."
                
            logger.info(f"[Synthesizer] Synthesized answer: {final_answer[:500]}...")
            return final_answer
            
        except Exception as e:
            logger.error(f"[Synthesizer] Error during answer synthesis: {e}")
            return f"Error synthesizing answer: {str(e)}"
    
    def _generate_synthesis_prompt(self) -> str:
        """
        Generate the system prompt for answer synthesis.
        
        Returns:
            System prompt for synthesis
        """
        if self.persona:
            system_prompt = f"""
{self.persona.get_persona_preamble()}

{self.persona.get_persona_injection("synthesis")}

You are responding to the Original User Query based on the provided context from tool executions.

IMPORTANT GUIDELINES:
1. When no data was found by the tools or the tools failed, ONLY respond with "NOTICE: No data found for your query." DO NOT provide any additional information.
2. Focus on what you CAN answer based on the available information, not what you can't.
3. If specific documents or data were not found, be extremely brief - do not provide general insights.
4. Synthesize all available information to provide a coherent, helpful response.
5. Use clear, confident language and structure your response with headings and bullet points when appropriate.
6. NEVER invent or fabricate specific financial data (revenue figures, growth rates, etc.) when they're not in the context.
"""
        else:
            system_prompt = """You are a helpful financial and business analysis assistant. Your goal is to provide the MOST USEFUL and VALUABLE answer to the user's query based on the available information, even if that information is incomplete.

IMPORTANT GUIDELINES:
1. When no data was found by the tools or the tools failed, ONLY respond with "NOTICE: No data found for your query." DO NOT provide any additional information or general knowledge.
2. Focus on what you CAN answer based on the available information, not what you can't.
3. If specific documents or data were not found, DO NOT provide general insights on the topic.
4. When documents from one company are missing but another company's information is available, provide helpful comparative analysis when possible.
5. Synthesize all available information to provide a coherent, helpful response.
6. Use clear, confident language and structure your response with headings and bullet points when appropriate.
7. NEVER invent or fabricate specific financial data (revenue figures, growth rates, etc.) when they're not in the context.

Remember, your goal is to be as helpful as possible while remaining accurate with the information you have."""
            
        return system_prompt 